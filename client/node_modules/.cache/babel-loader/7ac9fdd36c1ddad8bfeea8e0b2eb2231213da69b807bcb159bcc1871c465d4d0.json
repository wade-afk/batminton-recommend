{"ast":null,"code":"// 설문 응답을 라벨로 변환하는 함수\nexport function mapSurveyToLabels(surveyResponses, surveyMapping) {\n  const labels = {\n    PlayStyle: null,\n    WeightPref: null,\n    BalancePref: null,\n    ShaftFlex: null,\n    GripStrength: null,\n    Level: null\n  };\n  surveyResponses.forEach((response, index) => {\n    const questionNumber = `Q${index + 1}`;\n    const mapping = surveyMapping.find(m => m['문항'] === questionNumber && m['응답'] === response);\n    if (mapping && mapping['매핑 라벨'] && mapping['매핑 값']) {\n      const labelType = mapping['매핑 라벨'];\n      if (labels.hasOwnProperty(labelType)) {\n        labels[labelType] = mapping['매핑 값'];\n      }\n    }\n  });\n  return labels;\n}\n\n// 라켓 유사도 점수 계산\nexport function calculateSimilarityScore(userLabels, racket) {\n  let score = 0;\n  let totalPossible = 0;\n\n  // PlayStyle 매칭 (라켓 종류 기반)\n  if (userLabels.PlayStyle) {\n    totalPossible++;\n    const racketType = racket['종류'] || '';\n    if (userLabels.PlayStyle === '공격형' && racketType.includes('ASTROX')) {\n      score++;\n    } else if (userLabels.PlayStyle === '수비형' && racketType.includes('NANOFLARE')) {\n      score++;\n    } else if (userLabels.PlayStyle === '올라운드형' && racketType.includes('ARCSABER')) {\n      score++;\n    }\n  }\n\n  // WeightPref 매칭\n  if (userLabels.WeightPref && racket['무게']) {\n    totalPossible++;\n    const racketWeight = racket['무게'];\n    if (racketWeight.includes(userLabels.WeightPref)) {\n      score++;\n    }\n  }\n\n  // BalancePref 매칭\n  if (userLabels.BalancePref && racket['밸런스 포인트']) {\n    totalPossible++;\n    const balance = racket['밸런스 포인트'];\n    if (userLabels.BalancePref === '헤드헤비' && balance.includes('공격형')) {\n      score++;\n    } else if (userLabels.BalancePref === '헤드라이트' && balance.includes('기술형')) {\n      score++;\n    } else if (userLabels.BalancePref === '밸런스형' && balance.includes('올라운더형')) {\n      score++;\n    }\n  }\n\n  // ShaftFlex 매칭\n  if (userLabels.ShaftFlex && racket['샤프트 유연성']) {\n    totalPossible++;\n    const flex = racket['샤프트 유연성'];\n    if (userLabels.ShaftFlex === '단단함' && (flex.includes('Stiff') || flex.includes('STIFF'))) {\n      score++;\n    } else if (userLabels.ShaftFlex === '유연함' && (flex.includes('Flexible') || flex.includes('HI-FLEX'))) {\n      score++;\n    } else if (userLabels.ShaftFlex === '중간' && flex.includes('Medium')) {\n      score++;\n    }\n  }\n\n  // Level 매칭 (가격 기반)\n  if (userLabels.Level && racket[' 가격 ']) {\n    totalPossible++;\n    const price = parseInt(racket[' 가격 '].replace(/[^\\d]/g, ''));\n    if (userLabels.Level === '입문' && price <= 80000) {\n      score++;\n    } else if (userLabels.Level === '초급' && price <= 150000) {\n      score++;\n    } else if (userLabels.Level === '중급' && price <= 250000) {\n      score++;\n    } else if (userLabels.Level === '상급' && price > 250000) {\n      score++;\n    }\n  }\n  return totalPossible > 0 ? score / totalPossible * 100 : 0;\n}\n\n// 라켓 추천 함수\nexport function getRecommendations(surveyResponses, surveyMapping, racketData) {\n  // 설문 응답을 라벨로 변환\n  const userLabels = mapSurveyToLabels(surveyResponses, surveyMapping);\n\n  // 각 라켓에 대한 유사도 점수 계산\n  const racketScores = racketData.map(racket => ({\n    ...racket,\n    similarityScore: calculateSimilarityScore(userLabels, racket)\n  }));\n\n  // 점수 순으로 정렬하고 상위 3개 선택\n  const topRackets = racketScores.sort((a, b) => b.similarityScore - a.similarityScore).slice(0, 3);\n  return {\n    userLabels,\n    recommendations: topRackets\n  };\n}","map":{"version":3,"names":["mapSurveyToLabels","surveyResponses","surveyMapping","labels","PlayStyle","WeightPref","BalancePref","ShaftFlex","GripStrength","Level","forEach","response","index","questionNumber","mapping","find","m","labelType","hasOwnProperty","calculateSimilarityScore","userLabels","racket","score","totalPossible","racketType","includes","racketWeight","balance","flex","price","parseInt","replace","getRecommendations","racketData","racketScores","map","similarityScore","topRackets","sort","a","b","slice","recommendations"],"sources":["C:/testAI/batminton_recommand/client/src/utils/recommendationEngine.js"],"sourcesContent":["// 설문 응답을 라벨로 변환하는 함수\r\nexport function mapSurveyToLabels(surveyResponses, surveyMapping) {\r\n  const labels = {\r\n    PlayStyle: null,\r\n    WeightPref: null,\r\n    BalancePref: null,\r\n    ShaftFlex: null,\r\n    GripStrength: null,\r\n    Level: null\r\n  };\r\n\r\n  surveyResponses.forEach((response, index) => {\r\n    const questionNumber = `Q${index + 1}`;\r\n    const mapping = surveyMapping.find(m => \r\n      m['문항'] === questionNumber && \r\n      m['응답'] === response\r\n    );\r\n\r\n    if (mapping && mapping['매핑 라벨'] && mapping['매핑 값']) {\r\n      const labelType = mapping['매핑 라벨'];\r\n      if (labels.hasOwnProperty(labelType)) {\r\n        labels[labelType] = mapping['매핑 값'];\r\n      }\r\n    }\r\n  });\r\n\r\n  return labels;\r\n}\r\n\r\n// 라켓 유사도 점수 계산\r\nexport function calculateSimilarityScore(userLabels, racket) {\r\n  let score = 0;\r\n  let totalPossible = 0;\r\n\r\n  // PlayStyle 매칭 (라켓 종류 기반)\r\n  if (userLabels.PlayStyle) {\r\n    totalPossible++;\r\n    const racketType = racket['종류'] || '';\r\n    if (userLabels.PlayStyle === '공격형' && racketType.includes('ASTROX')) {\r\n      score++;\r\n    } else if (userLabels.PlayStyle === '수비형' && racketType.includes('NANOFLARE')) {\r\n      score++;\r\n    } else if (userLabels.PlayStyle === '올라운드형' && racketType.includes('ARCSABER')) {\r\n      score++;\r\n    }\r\n  }\r\n\r\n  // WeightPref 매칭\r\n  if (userLabels.WeightPref && racket['무게']) {\r\n    totalPossible++;\r\n    const racketWeight = racket['무게'];\r\n    if (racketWeight.includes(userLabels.WeightPref)) {\r\n      score++;\r\n    }\r\n  }\r\n\r\n  // BalancePref 매칭\r\n  if (userLabels.BalancePref && racket['밸런스 포인트']) {\r\n    totalPossible++;\r\n    const balance = racket['밸런스 포인트'];\r\n    if (userLabels.BalancePref === '헤드헤비' && balance.includes('공격형')) {\r\n      score++;\r\n    } else if (userLabels.BalancePref === '헤드라이트' && balance.includes('기술형')) {\r\n      score++;\r\n    } else if (userLabels.BalancePref === '밸런스형' && balance.includes('올라운더형')) {\r\n      score++;\r\n    }\r\n  }\r\n\r\n  // ShaftFlex 매칭\r\n  if (userLabels.ShaftFlex && racket['샤프트 유연성']) {\r\n    totalPossible++;\r\n    const flex = racket['샤프트 유연성'];\r\n    if (userLabels.ShaftFlex === '단단함' && (flex.includes('Stiff') || flex.includes('STIFF'))) {\r\n      score++;\r\n    } else if (userLabels.ShaftFlex === '유연함' && (flex.includes('Flexible') || flex.includes('HI-FLEX'))) {\r\n      score++;\r\n    } else if (userLabels.ShaftFlex === '중간' && flex.includes('Medium')) {\r\n      score++;\r\n    }\r\n  }\r\n\r\n  // Level 매칭 (가격 기반)\r\n  if (userLabels.Level && racket[' 가격 ']) {\r\n    totalPossible++;\r\n    const price = parseInt(racket[' 가격 '].replace(/[^\\d]/g, ''));\r\n    if (userLabels.Level === '입문' && price <= 80000) {\r\n      score++;\r\n    } else if (userLabels.Level === '초급' && price <= 150000) {\r\n      score++;\r\n    } else if (userLabels.Level === '중급' && price <= 250000) {\r\n      score++;\r\n    } else if (userLabels.Level === '상급' && price > 250000) {\r\n      score++;\r\n    }\r\n  }\r\n\r\n  return totalPossible > 0 ? (score / totalPossible) * 100 : 0;\r\n}\r\n\r\n// 라켓 추천 함수\r\nexport function getRecommendations(surveyResponses, surveyMapping, racketData) {\r\n  // 설문 응답을 라벨로 변환\r\n  const userLabels = mapSurveyToLabels(surveyResponses, surveyMapping);\r\n  \r\n  // 각 라켓에 대한 유사도 점수 계산\r\n  const racketScores = racketData.map(racket => ({\r\n    ...racket,\r\n    similarityScore: calculateSimilarityScore(userLabels, racket)\r\n  }));\r\n\r\n  // 점수 순으로 정렬하고 상위 3개 선택\r\n  const topRackets = racketScores\r\n    .sort((a, b) => b.similarityScore - a.similarityScore)\r\n    .slice(0, 3);\r\n\r\n  return {\r\n    userLabels,\r\n    recommendations: topRackets\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}